{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","yes_grammar","no_grammar","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","actions","assign","context","option","recResult","prompt","entry","ENDSPEECH","ask","query","invoke","id","src","event","nluRequest","onDone","data","intent","name","console","log","onError","menu","cond","todo","timer","appointment","who","nomatch","confirm_meeting","confirmed","fetch","Request","proxyUrl","method","headers","body","then","json","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.5139884e.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\nimport \"./styles.scss\";\n// import * as React from 'react';\n// import * as ReactDOM from \"react-dom\";\n// import { useMachine, asEffect } from \"@xstate/react\";\n// import { inspect } from \"@xstate/inspect\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: send('LISTEN')\n            },\n        }})\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Chris\": {person: \"Chris Swan\"},\n    \"Mark\": {person: \"Mark Curtis\"},\n    \"Sophie\": {person: \"Sophie Howard\"},\n\n    \"on Monday\": {day: \"Monday\"},\n    \"on Tuesday\": {day: \"Tuesday\"},\n    \"on Wednesday\": {day: \"Wednesday\"},\n    \"on Thursday\": {day: \"Thursday\"},\n    \"on Friday\": { day: \"Friday\" },\n\n    \"at two\": {time: \"2:00\"},\n    \"at three\": {time: \"3:00\"},\n    \"at four\": {time: \"4:00\"},\n    \"at five\": {time: \"5:00\"},\n    \"at six\": {time: \"6:00\"},\n    \"at seven\": {time: \"7:00\"},\n    \"at eight\": {time: \"8:00\"},\n    \"at nine\": {time: \"9:00\"},\n    \"at ten\": { time: \"10:00\" },\n\n}\n\nconst yes_grammar: {[index: string]: boolean} = {\n    \"yes\": true,\n    \"sure\" : true,\n    \"certainly\": true,\n    \"of course\": true,\n    \"yes of course\": true,\n}\n\nconst no_grammar: {[index: string]: boolean} = {\n    \"no\": false,\n    \"no way!\": false,\n    \"absolutely not\" : false\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n   \n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }            \n        },        \n\n        welcome: {\n            on: {\n                RECOGNISED: {\n                    target: \"query\",\n                    actions: assign((context) => { return { option: context.recResult } }),\n                }    \n            },\n                    ...promptAndAsk(\"Hello, welcome! Your options are to make an appointment, to do item or timer\")\n        },\n\n\n        query: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.option),\n                onDone: {\n                    target: 'menu',\n                    actions: [assign((context, event) => { return  {option: event.data.intent.name} }),\n                    (context: SDSContext, event: any) => console.log(event.data)]\n                    //actions: assign({ intent: (context: SDSContext, event: any) =>{ return event.data }})\n\n                },\n                onError: {\n                    target: 'welcome',\n                    actions: (context, event) => console.log(event.data)\n                }\n            }\n        },\n\n        menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [\n                    { target: 'todo', cond: (context) => context.option === 'todo' },\n                    { target: 'timer', cond: (context) => context.option === 'timer' },\n                    { target: 'appointment', cond: (context) => context.option === 'appointment' }\n                ]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. I understand.`\n                    })),\n        },\n     /*            nomatch: {\n                    entry: say(\"Sorry, I don't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n        } */ \n            }       \n        },\n\n\n        todo: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a to do item`\n                    }))\n                }}\n        },\n        \n        timer: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create a timer`\n                    }))\n                }}\n        },\n        \n        \n        appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Let's create an appointment`\n                    }))\n                }}\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n\t\t\t\t\tcond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"time\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n                    })),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I didn't understand\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        time: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_meeting\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.day}. What time is your meeting?`,\n                    \n                    })),\n            on: { ENDSPEECH: \"ask\" }\n                },\n        ask: {\n            entry: listen()\n                },\n        nomatch: {\n            entry: say(\"Sorry I don't know that\"),\n        on: { ENDSPEECH: \"prompt\" }\n                }\n                }\n        },\n\n    confirm_meeting: {\n        initial: \"prompt\",\n        on:  {\n            RECOGNISED: [{cond: (context) => (context.recResult in no_grammar),\n                target: \"day\"\n            },\n    {cond: (context) => (context.recResult in yes_grammar),\n    target: \"confirmed\"\n    },\n            { target: \".nomatch\" }]\n        },\n        states: {\n            prompt: {\n               entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n        on: { ENDSPEECH: \"ask\" }\n            },\n    ask: {\n         entry: listen()\n        },\n    nomatch: {\n        entry: say(\"Sorry, I don't understand\"),\n    on: { ENDSPEECH: \"prompt\" }\n           }\n            },\n        },\n    \n    \n    confirmed: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `Your appointment has been created!`\n                }))\n            },\n    }\n    }\n    }})\n\n\n\n// RASI API!\n\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaUrl = 'https://appointment-model.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyUrl + rasaUrl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n\t\t            initial: 'progress',\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n\t\t    \tprogress: {\n\t\t\t            },\t    \t\t\t\t\t\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://krisfarr21.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);"],"sourceRoot":""}